
FROM node:23-alpine AS builder
# Build stage: install dependencies and build the app
ARG DOCKER_BUILD="1" # Build-time environment variable to detect Docker build
# Set working directory
WORKDIR /app 

# Install pnpm (package manager)
RUN corepack enable pnpm

# Copy only package.json and pnpm-lock.yaml first for better cache
COPY package.json pnpm-lock.yaml ./

# Install dependencies with exact versions (this layer will be cached if deps don't change)
RUN pnpm install --frozen-lockfile

# Now copy the rest of the source code
COPY . .

# Build Next.js in standalone mode for optimized deploy
# https://github.com/vercel/next.js/discussions/65511
ENV NEXT_STANDALONE_OUTPUT="true"
RUN pnpm build

# Runtime stage (runner): only contains built code, lighter
FROM node:23-alpine AS runner
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
# Disable Next.js telemetry
ENV NEXT_TELEMETRY_DISABLED=1

# Create secure user, do not run as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy public assets
COPY --from=builder /app/public ./public

# Copy built code (standalone + static)
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy migration files (if using DB migration)
COPY --from=builder /app/src/lib/db/migrations ./src/lib/db/migrations

# Run app as nextjs user (not root)
USER nextjs

# Set port and hostname
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Expose port 3000 for Docker
EXPOSE 3000

# Run app: server.js is generated by Next.js build
# https://nextjs.org/docs/pages/api-reference/config/next-config-js/output
CMD ["node", "server.js"]